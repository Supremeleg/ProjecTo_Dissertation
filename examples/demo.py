#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ProjecTo ÊºîÁ§∫Á®ãÂ∫è
Â±ïÁ§∫Á≥ªÁªüÁöÑÂü∫Êú¨ÂäüËÉΩÔºå‰∏çÈúÄË¶ÅÁâ©ÁêÜÁ°¨‰ª∂
"""

import sys
import time
from pathlib import Path

# Ê∑ªÂä†È°πÁõÆË∑ØÂæÑ
project_root = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(project_root))

from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QPushButton, QLabel, QTextEdit
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QFont

from config.settings import AppSettings
from core.system import ProjecToSystem

class DemoWindow(QMainWindow):
    """ÊºîÁ§∫Á™óÂè£"""
    
    def __init__(self):
        super().__init__()
        self.system = None
        self.setup_ui()
        self.setup_system()
    
    def setup_ui(self):
        """ËÆæÁΩÆUIÁïåÈù¢"""
        self.setWindowTitle("ProjecTo ÊºîÁ§∫Á®ãÂ∫è")
        self.setGeometry(100, 100, 800, 600)
        
        # ‰∏ªÂ∏ÉÂ±Ä
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Ê†áÈ¢ò
        title = QLabel("ProjecTo - Êô∫ËÉΩ‰∫§‰∫íÊäïÂΩ±Á≥ªÁªü")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        layout.addWidget(title)
        
        # Áä∂ÊÄÅÊòæÁ§∫
        self.status_label = QLabel("Á≥ªÁªüÁä∂ÊÄÅ: Êú™ÂàùÂßãÂåñ")
        self.status_label.setFont(QFont("Arial", 12))
        layout.addWidget(self.status_label)
        
        # Èò∂ÊÆµÊéßÂà∂ÊåâÈíÆ
        stage_layout = QHBoxLayout()
        
        self.rest_btn = QPushButton("REST (ÂæÖÊú∫)")
        self.rest_btn.clicked.connect(lambda: self.change_stage(AppSettings.Stage.REST))
        stage_layout.addWidget(self.rest_btn)
        
        self.primary_btn = QPushButton("PRIMARY (Âü∫Á°Ä‰∫§‰∫í)")
        self.primary_btn.clicked.connect(lambda: self.change_stage(AppSettings.Stage.PRIMARY_INTERACTION))
        stage_layout.addWidget(self.primary_btn)
        
        self.menu_btn = QPushButton("MENU (ËèúÂçïËØ¶ÊÉÖ)")
        self.menu_btn.clicked.connect(lambda: self.change_stage(AppSettings.Stage.MENU_DETAIL))
        stage_layout.addWidget(self.menu_btn)
        
        self.object_btn = QPushButton("Áâ©‰ΩìËØÜÂà´")
        self.object_btn.clicked.connect(lambda: self.change_stage(AppSettings.Stage.OBJECT_RECOGNITION))
        stage_layout.addWidget(self.object_btn)
        
        layout.addLayout(stage_layout)
        
        # Êú∫Ê¢∞ËáÇÊéßÂà∂ÊåâÈíÆÔºàÂ¶ÇÊûúÂêØÁî®Ôºâ
        robot_layout = QHBoxLayout()
        
        self.connect_robot_btn = QPushButton("ËøûÊé•Êú∫Ê¢∞ËáÇ")
        self.connect_robot_btn.clicked.connect(self.connect_robot)
        robot_layout.addWidget(self.connect_robot_btn)
        
        self.move_rest_btn = QPushButton("ÁßªÂä®Âà∞‰ºëÊÅØ‰ΩçÁΩÆ")
        self.move_rest_btn.clicked.connect(lambda: self.move_robot("rest"))
        robot_layout.addWidget(self.move_rest_btn)
        
        self.move_v_btn = QPushButton("ÁßªÂä®Âà∞V‰ΩçÁΩÆ")
        self.move_v_btn.clicked.connect(lambda: self.move_robot("V"))
        robot_layout.addWidget(self.move_v_btn)
        
        self.nod_btn = QPushButton("ÁÇπÂ§¥Âä®‰Ωú")
        self.nod_btn.clicked.connect(self.robot_nod)
        robot_layout.addWidget(self.nod_btn)
        
        layout.addLayout(robot_layout)
        
        # Êó•ÂøóÊòæÁ§∫
        log_label = QLabel("Á≥ªÁªüÊó•Âøó:")
        layout.addWidget(log_label)
        
        self.log_text = QTextEdit()
        self.log_text.setMaximumHeight(200)
        self.log_text.setReadOnly(True)
        layout.addWidget(self.log_text)
        
        # ÊéßÂà∂ÊåâÈíÆ
        control_layout = QHBoxLayout()
        
        self.start_btn = QPushButton("ÂêØÂä®Á≥ªÁªü")
        self.start_btn.clicked.connect(self.start_system)
        control_layout.addWidget(self.start_btn)
        
        self.stop_btn = QPushButton("ÂÅúÊ≠¢Á≥ªÁªü")
        self.stop_btn.clicked.connect(self.stop_system)
        self.stop_btn.setEnabled(False)
        control_layout.addWidget(self.stop_btn)
        
        layout.addLayout(control_layout)
        
        # Êõ¥Êñ∞ÂÆöÊó∂Âô®
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_status)
        self.update_timer.start(1000)  # ÊØèÁßíÊõ¥Êñ∞‰∏ÄÊ¨°
    
    def setup_system(self):
        """ËÆæÁΩÆÁ≥ªÁªü"""
        # Âº∫Âà∂Á¶ÅÁî®Êú∫Ê¢∞ËáÇÔºàÊºîÁ§∫Ê®°ÂºèÔºâ
        AppSettings.ENABLE_ROBOT = False
        AppSettings.DEBUG_MODE = True
        AppSettings.FULLSCREEN = False
        
        self.log("ÊºîÁ§∫Ê®°ÂºèÔºöÊú∫Ê¢∞ËáÇÂäüËÉΩÂ∑≤Á¶ÅÁî®")
    
    def start_system(self):
        """ÂêØÂä®Á≥ªÁªü"""
        try:
            self.log("Ê≠£Âú®ÂêØÂä®ProjecToÁ≥ªÁªü...")
            self.system = ProjecToSystem()
            
            # ËøûÊé•‰ø°Âè∑
            self.system.system_ready.connect(self.on_system_ready)
            self.system.system_error.connect(self.on_system_error)
            self.system.stage_changed.connect(self.on_stage_changed)
            
            if self.system.start():
                self.start_btn.setEnabled(False)
                self.stop_btn.setEnabled(True)
                self.log("‚úÖ Á≥ªÁªüÂêØÂä®ÊàêÂäü")
            else:
                self.log("‚ùå Á≥ªÁªüÂêØÂä®Â§±Ë¥•")
        
        except Exception as e:
            self.log(f"‚ùå ÂêØÂä®Á≥ªÁªüÊó∂Âá∫Èîô: {e}")
    
    def stop_system(self):
        """ÂÅúÊ≠¢Á≥ªÁªü"""
        try:
            if self.system:
                self.system.stop()
                self.system = None
            
            self.start_btn.setEnabled(True)
            self.stop_btn.setEnabled(False)
            self.log("‚úÖ Á≥ªÁªüÂ∑≤ÂÅúÊ≠¢")
        
        except Exception as e:
            self.log(f"‚ö†Ô∏è ÂÅúÊ≠¢Á≥ªÁªüÊó∂Âá∫Èîô: {e}")
    
    def change_stage(self, stage: str):
        """ÂàáÊç¢Èò∂ÊÆµ"""
        if self.system and self.system.is_running:
            if self.system.change_stage(stage):
                self.log(f"‚úÖ ÂàáÊç¢Âà∞Èò∂ÊÆµ: {stage}")
            else:
                self.log(f"‚ùå Èò∂ÊÆµÂàáÊç¢Â§±Ë¥•: {stage}")
        else:
            self.log("‚ö†Ô∏è Á≥ªÁªüÊú™ËøêË°åÔºåÊó†Ê≥ïÂàáÊç¢Èò∂ÊÆµ")
    
    def connect_robot(self):
        """ËøûÊé•Êú∫Ê¢∞ËáÇ"""
        self.log("ÊºîÁ§∫Ê®°ÂºèÔºöÊú∫Ê¢∞ËáÇËøûÊé•Â∑≤Á¶ÅÁî®")
    
    def move_robot(self, position: str):
        """ÁßªÂä®Êú∫Ê¢∞ËáÇ"""
        self.log(f"ÊºîÁ§∫Ê®°ÂºèÔºöÊ®°ÊãüÊú∫Ê¢∞ËáÇÁßªÂä®Âà∞ {position}")
    
    def robot_nod(self):
        """Êú∫Ê¢∞ËáÇÁÇπÂ§¥"""
        self.log("ÊºîÁ§∫Ê®°ÂºèÔºöÊ®°ÊãüÊú∫Ê¢∞ËáÇÁÇπÂ§¥Âä®‰Ωú")
    
    def update_status(self):
        """Êõ¥Êñ∞Áä∂ÊÄÅÊòæÁ§∫"""
        if self.system and self.system.is_running:
            status = self.system.get_system_status()
            status_text = f"Á≥ªÁªüÁä∂ÊÄÅ: ËøêË°å‰∏≠ | ÂΩìÂâçÈò∂ÊÆµ: {status['current_stage']} | Êú∫Ê¢∞ËáÇ: {'ÂêØÁî®' if status['robot_enabled'] else 'Á¶ÅÁî®'}"
            self.status_label.setText(status_text)
        else:
            self.status_label.setText("Á≥ªÁªüÁä∂ÊÄÅ: Êú™ËøêË°å")
    
    def on_system_ready(self):
        """Á≥ªÁªüÂ∞±Áª™"""
        self.log("üéâ Á≥ªÁªüÂ∞±Áª™")
    
    def on_system_error(self, error: str):
        """Á≥ªÁªüÈîôËØØ"""
        self.log(f"‚ùå Á≥ªÁªüÈîôËØØ: {error}")
    
    def on_stage_changed(self, old_stage: str, new_stage: str):
        """Èò∂ÊÆµÂèòÂåñ"""
        self.log(f"üîÑ Èò∂ÊÆµÂèòÂåñ: {old_stage} -> {new_stage}")
    
    def log(self, message: str):
        """Ê∑ªÂä†Êó•Âøó"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        self.log_text.append(log_message)
        print(log_message)
    
    def closeEvent(self, event):
        """ÂÖ≥Èó≠‰∫ã‰ª∂"""
        if self.system:
            self.stop_system()
        event.accept()

def main():
    """‰∏ªÂáΩÊï∞"""
    print("=" * 50)
    print("ProjecTo ÊºîÁ§∫Á®ãÂ∫è")
    print("=" * 50)
    
    app = QApplication(sys.argv)
    app.setApplicationName("ProjecTo Demo")
    
    window = DemoWindow()
    window.show()
    
    return app.exec()

if __name__ == "__main__":
    sys.exit(main())
